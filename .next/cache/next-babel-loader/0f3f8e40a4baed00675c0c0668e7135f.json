{"ast":null,"code":"const crypto = require('crypto');\n\nconst algorithm = 'aes-256-cbc';\nconst key = process.env.ENCRYPTION_KEY;\n\nconst encrypt = plainText => {\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(algorithm, Buffer.from(key), iv);\n  const cipherText = cipher.update(plainText);\n  const encrypted = Buffer.concat([cipherText, cipher.final()]);\n  return `${iv.toString('hex')}:${encrypted.toString('hex')}`;\n};\n\nconst decrypt = plainText => {\n  const textParts = plainText.split(':');\n  const iv = Buffer.from(textParts.shift(), 'hex');\n  const encryptedText = Buffer.from(textParts.join(':'), 'hex');\n  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n  const decipherText = decipher.update(encryptedText);\n  const decrypted = Buffer.concat([decipherText, decipher.final()]);\n  return decrypted.toString();\n};\n\nmodule.exports = {\n  decrypt,\n  encrypt\n};","map":{"version":3,"sources":["/Users/mcs/Development/projects/sandbox/tweet-review/pages/api/_util/token/encryption.js"],"names":["crypto","require","algorithm","key","process","env","ENCRYPTION_KEY","encrypt","plainText","iv","randomBytes","cipher","createCipheriv","Buffer","from","cipherText","update","encrypted","concat","final","toString","decrypt","textParts","split","shift","encryptedText","join","decipher","createDecipheriv","decipherText","decrypted","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,SAAS,GAAG,aAAlB;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAxB;;AAEA,MAAMC,OAAO,GAAGC,SAAS,IAAI;AAC3B,QAAMC,EAAE,GAAGT,MAAM,CAACU,WAAP,CAAmB,EAAnB,CAAX;AACA,QAAMC,MAAM,GAAGX,MAAM,CAACY,cAAP,CAAsBV,SAAtB,EAAiCW,MAAM,CAACC,IAAP,CAAYX,GAAZ,CAAjC,EAAmDM,EAAnD,CAAf;AACA,QAAMM,UAAU,GAAGJ,MAAM,CAACK,MAAP,CAAcR,SAAd,CAAnB;AACA,QAAMS,SAAS,GAAGJ,MAAM,CAACK,MAAP,CAAc,CAACH,UAAD,EAAaJ,MAAM,CAACQ,KAAP,EAAb,CAAd,CAAlB;AACA,SAAQ,GAAEV,EAAE,CAACW,QAAH,CAAY,KAAZ,CAAmB,IAAGH,SAAS,CAACG,QAAV,CAAmB,KAAnB,CAA0B,EAA1D;AACD,CAND;;AAQA,MAAMC,OAAO,GAAGb,SAAS,IAAI;AAC3B,QAAMc,SAAS,GAAGd,SAAS,CAACe,KAAV,CAAgB,GAAhB,CAAlB;AACA,QAAMd,EAAE,GAAGI,MAAM,CAACC,IAAP,CAAYQ,SAAS,CAACE,KAAV,EAAZ,EAA+B,KAA/B,CAAX;AACA,QAAMC,aAAa,GAAGZ,MAAM,CAACC,IAAP,CAAYQ,SAAS,CAACI,IAAV,CAAe,GAAf,CAAZ,EAAiC,KAAjC,CAAtB;AACA,QAAMC,QAAQ,GAAG3B,MAAM,CAAC4B,gBAAP,CAAwB,aAAxB,EAAuCf,MAAM,CAACC,IAAP,CAAYX,GAAZ,CAAvC,EAAyDM,EAAzD,CAAjB;AACA,QAAMoB,YAAY,GAAGF,QAAQ,CAACX,MAAT,CAAgBS,aAAhB,CAArB;AACA,QAAMK,SAAS,GAAGjB,MAAM,CAACK,MAAP,CAAc,CAACW,YAAD,EAAeF,QAAQ,CAACR,KAAT,EAAf,CAAd,CAAlB;AACA,SAAOW,SAAS,CAACV,QAAV,EAAP;AACD,CARD;;AAUAW,MAAM,CAACC,OAAP,GAAiB;AAAEX,EAAAA,OAAF;AAAWd,EAAAA;AAAX,CAAjB","sourcesContent":["const crypto = require('crypto');\nconst algorithm = 'aes-256-cbc';\nconst key = process.env.ENCRYPTION_KEY;\n\nconst encrypt = plainText => {\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(algorithm, Buffer.from(key), iv);\n  const cipherText = cipher.update(plainText);\n  const encrypted = Buffer.concat([cipherText, cipher.final()]);\n  return `${iv.toString('hex')}:${encrypted.toString('hex')}`;\n};\n\nconst decrypt = plainText => {\n  const textParts = plainText.split(':');\n  const iv = Buffer.from(textParts.shift(), 'hex');\n  const encryptedText = Buffer.from(textParts.join(':'), 'hex');\n  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\n  const decipherText = decipher.update(encryptedText);\n  const decrypted = Buffer.concat([decipherText, decipher.final()]);\n  return decrypted.toString();\n};\n\nmodule.exports = { decrypt, encrypt };\n"]},"metadata":{},"sourceType":"script"}